Plan/Status
===========

-> create a class that can create template from text (done)
-> create an extended that can create template from existing file (done)
-> generate frame objects based on available frame strings in frame directories (done)
-> create object from a frame created in a text file (done)
-> Later, generate code for the frame based on the class
-> Its a self-learning auto code generator (far-future)
-> enable frame_string to contain frame class name
-> plan is basically being moved to the issues section in Github for 
   better tracking



Purpose
=======

-> Enable developing own language to program,
-> This will not only create code, but also a structure,
-> Turn every directory in a structure




Tests
=====
-> Next task is to get started with test writing for the class (done)
-> 25 tests passing (october 20, 2019) 
-> 54 tests passing (october 27, 2019) 


Things to remember while creating testcase
------------------------------------------
-> each unit has to be independent
-> test names should be as descriptive as possible
-> run test suite before and after work so nothing breaks
-> while debugging projects, it is necessary to add a test
   pinpointing that bug, considered most important pieces in code
-> keep tests as fast as possible
-> if test is slow, keep them in separate place and run 
   as scheduled task to avoid delay in development


TODO
----
- how to define a class on the fly > no need: will create class object on the fly (done)
- think about how to utilize the objects and plan thorougly before
  writing more codes


Terminology
-----------

frame string
    a string that that can be used as a template for automating text
    generation

frame file (.ff)
    a text file that contains frame string

frame user param (.fup)
    a file that contains inputs for generating text based on a specific
    template


Plan So far
=============

CommandLibrary
--------------
    a new class is extended from TemplateLibrary to separate general
    frame files from command frame files

    general frame files are the file that are addressed as "frame file"
    through the projects

    command frame files are the files that are going to be used for
    executing python commands

    While generating text from objects created in TemplateLibrary 
    user has to call the 'getGeneratedCode' method from the TemplateInfo 
    class

    In case of CommandLibrary, user has to call 'runGeneratedCode' instead

    By including CommandLibrary as a separate class, confusion will be
    avoided between frame file and command frame file

    frame file is addressed as 'frame file', command frame file is 
    addressed as 'command file' throughout the project


Framework file
---------------
    this file can contain multiple frame object along with other texts
    it can also contain basic coding commands such as for loop/ if loop

    Example: (Probable Structure)
    ______________________________________________________________
   |                                                              |
   |  This is a frameObj(Ã–bjectName1). This can be done with      |
   |  frameObj(ObjectName2).                                      |
   |  frameObj(ObjectName3)[$i]                                   |
   |  ?($j) frameObj(ObjectName4)                                 |
   |______________________________________________________________|


Framework directory
-------------------
    this directory will keep information of a directory structure and
    information about each file's related Framework file that is 
    mentioned above

    Example: (Probable Structure)

    _____________________________________________________________
   | $top_dir/                                                   |
   |     $dir_level1/                                            |
   |         $filename1, framework_file(name)                    |
   |         $filename2, framework_file(name)                    |
   |     $dir_level2/                                            |
   |         $dir_level2_1/                                      |
   |              $filename3, framework_file(name)               |
   |     $dir_level3/ framework_dir(name)                        |
   |_____________________________________________________________|



User Input Taker
----------------
    > for each leaf level framework file, a input taker will be generated
    > all the framework_dir will be extracted upto leaf level
    > how the user input will be taken is not decided yet (may be json)


So, the flow is as below -
1) frame objects will be created based on frame_files in frame_dirs
2) frame_objects and functional_commands will be used to create framework_file
3) framework_dir will be used for containing information about directory
   structure, framework_file usage and other framework_dirs
4) based on that, user will be provided with a parallel directory structure
   that will give place for inputs from users
5) based on users input, directories and texts will be generated and other
   scripts will also be run
